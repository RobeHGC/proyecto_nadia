#!/usr/bin/env python3
"""Rollback authentication tables migration for Epic 53 Session 1."""
import asyncio
import os
import sys
from pathlib import Path
from datetime import datetime

# Add project root to Python path
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.models import DatabaseManager
from dotenv import load_dotenv

load_dotenv()


async def backup_auth_data():
    """Backup authentication data before rollback."""
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        print("ERROR: DATABASE_URL not found in environment")
        return False
    
    db = DatabaseManager(db_url)
    await db.initialize()
    
    backup_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"auth_backup_{backup_timestamp}.sql"
    
    try:
        async with db._pool.acquire() as conn:
            print("üì¶ Creating backup of authentication data...")
            
            # Check if tables exist
            tables_check = await conn.fetch("""
                SELECT tablename FROM pg_tables 
                WHERE schemaname = 'public' 
                AND tablename IN ('users', 'user_sessions', 'user_permissions', 'auth_audit_log')
            """)
            
            if not tables_check:
                print("‚ÑπÔ∏è  No authentication tables found - nothing to backup")
                return True
            
            # Count records
            counts = {}
            for table_row in tables_check:
                table_name = table_row['tablename']
                count = await conn.fetchval(f"SELECT COUNT(*) FROM {table_name}")
                counts[table_name] = count
            
            print(f"üìä Data to backup:")
            for table, count in counts.items():
                print(f"  - {table}: {count} records")
            
            # Create backup SQL
            backup_sql = [
                f"-- Authentication data backup - {backup_timestamp}",
                f"-- Generated by rollback_auth_migration.py",
                f"-- Tables: {', '.join(counts.keys())}",
                "",
            ]
            
            # Export data from each table
            for table_row in tables_check:
                table_name = table_row['tablename']
                
                # Get table schema
                columns = await conn.fetch("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = $1 
                    ORDER BY ordinal_position
                """, table_name)
                
                column_names = [col['column_name'] for col in columns]
                
                if counts[table_name] > 0:
                    backup_sql.append(f"-- Backup data for {table_name}")
                    backup_sql.append(f"CREATE TABLE IF NOT EXISTS {table_name}_backup AS SELECT * FROM {table_name};")
                    backup_sql.append("")
            
            # Write backup file
            backup_path = Path(__file__).parent.parent / "backups" / backup_file
            backup_path.parent.mkdir(exist_ok=True)
            
            with open(backup_path, 'w') as f:
                f.write('\n'.join(backup_sql))
            
            print(f"‚úÖ Backup created: {backup_path}")
            print(f"   To restore: psql $DATABASE_URL -f {backup_path}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Backup failed: {e}")
        return False
    finally:
        await db.close()


async def run_rollback():
    """Execute authentication tables rollback."""
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        print("ERROR: DATABASE_URL not found in environment")
        return False
    
    # Confirm with user
    print("‚ö†Ô∏è  WARNING: This will REMOVE all authentication tables and data!")
    print("   - users")
    print("   - user_sessions") 
    print("   - user_permissions")
    print("   - auth_audit_log")
    print()
    print("   System will revert to legacy API key authentication only.")
    print()
    
    confirm = input("Type 'CONFIRM ROLLBACK' to proceed: ")
    if confirm != "CONFIRM ROLLBACK":
        print("‚ùå Rollback cancelled by user")
        return False
    
    # Create backup first
    print("üîÑ Creating backup before rollback...")
    backup_success = await backup_auth_data()
    if not backup_success:
        print("‚ùå Backup failed - aborting rollback for safety")
        return False
    
    db = DatabaseManager(db_url)
    await db.initialize()
    
    try:
        async with db._pool.acquire() as conn:
            # Read rollback migration file
            rollback_path = Path(__file__).parent.parent / "database" / "migrations" / "rollback_authentication_tables.sql"
            
            if not rollback_path.exists():
                print(f"‚ùå Rollback script not found: {rollback_path}")
                return False
            
            with open(rollback_path, 'r') as f:
                rollback_sql = f.read()
            
            print("üîÑ Executing rollback migration...")
            
            # Execute rollback in transaction
            async with conn.transaction():
                await conn.execute(rollback_sql)
            
            print("‚úÖ Rollback migration executed successfully!")
            
            # Verify tables are removed
            remaining_tables = await conn.fetch("""
                SELECT tablename FROM pg_tables 
                WHERE schemaname = 'public' 
                AND tablename IN ('users', 'user_sessions', 'user_permissions', 'auth_audit_log')
            """)
            
            if remaining_tables:
                print(f"‚ö†Ô∏è  Warning: Some tables still exist:")
                for table in remaining_tables:
                    print(f"   - {table['tablename']}")
                return False
            else:
                print("‚úÖ All authentication tables successfully removed")
            
            print("\nüìã Post-rollback checklist:")
            print("   ‚úÖ Authentication tables removed")
            print("   ‚úÖ Data backed up")
            print("   ‚è≥ API server restart required")
            print("   ‚è≥ Remove OAuth environment variables")
            print("   ‚è≥ Test legacy API key functionality")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Rollback failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        await db.close()


async def test_legacy_api():
    """Test that legacy API key still works after rollback."""
    api_key = os.getenv('DASHBOARD_API_KEY')
    if not api_key:
        print("‚ö†Ô∏è  Warning: DASHBOARD_API_KEY not found in environment")
        print("   Make sure to set this before testing API access")
        return
    
    print(f"‚ÑπÔ∏è  Legacy API key configured: {api_key[:8]}...")
    print("   Test with: curl -H 'Authorization: Bearer {api_key}' http://localhost:8000/health")


if __name__ == "__main__":
    print("üîÑ Epic 53 Session 1: Authentication Rollback")
    print("=" * 50)
    
    success = asyncio.run(run_rollback())
    
    if success:
        print("\nüéâ Rollback completed successfully!")
        print("\nNext steps:")
        print("1. Restart API server")
        print("2. Test legacy API key functionality")
        print("3. Remove OAuth environment variables if desired")
        print("4. Update documentation to reflect rollback")
        
        asyncio.run(test_legacy_api())
    else:
        print("\n‚ùå Rollback failed - system may be in inconsistent state")
        print("Check logs and verify database manually")
    
    sys.exit(0 if success else 1)