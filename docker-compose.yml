# NADIA HITL Production Docker Compose Configuration
# Comprehensive multi-service setup for production deployment

version: '3.8'

services:
  # ====================================================================
  # Core Application Services
  # ====================================================================
  
  # Telegram Bot Service
  nadia-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
        BUILD_DATE: ${BUILD_DATE:-unknown}
        BUILD_VERSION: ${BUILD_VERSION:-latest}
        BUILD_COMMIT: ${BUILD_COMMIT:-unknown}
    container_name: nadia-bot
    restart: unless-stopped
    command: ["python", "userbot.py"]
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      - PHONE_NUMBER=${PHONE_NUMBER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DASHBOARD_API_KEY=${DASHBOARD_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - bot_sessions:/app/sessions
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nadia-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Server Service
  nadia-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
    container_name: nadia-api
    restart: unless-stopped
    command: ["python", "-m", "api.server"]
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DASHBOARD_API_KEY=${DASHBOARD_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nadia-network
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Service
  nadia-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nadia-dashboard
    restart: unless-stopped
    command: ["python", "dashboard/backend/static_server.py"]
    ports:
      - "3000:3000"
    environment:
      - PYTHONPATH=/app
      - API_BASE_URL=http://nadia-api:8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      - nadia-api
    networks:
      - nadia-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Background Worker Service (for async tasks)
  nadia-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nadia-worker
    restart: unless-stopped
    command: ["python", "-m", "agents.recovery_agent"]
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nadia-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ====================================================================
  # Infrastructure Services
  # ====================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: nadia-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-nadia_hitl}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - nadia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nadia_hitl}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache and Message Queue
  redis:
    image: redis:7-alpine
    container_name: nadia-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - nadia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ====================================================================
  # Monitoring and Observability (Fase 3)
  # ====================================================================

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: nadia-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nadia-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: nadia-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - nadia-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nadia-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - nadia-api
      - nadia-dashboard
      - grafana
    networks:
      - nadia-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ====================================================================
# Networks and Volumes
# ====================================================================

networks:
  nadia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  bot_sessions:
    driver: local