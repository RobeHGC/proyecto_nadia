name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort
    
    - name: Run ruff linter
      run: ruff check . --output-format=github
      
    - name: Run ruff formatter
      run: ruff format --check .
      
    - name: Check import sorting
      run: isort --check-only --diff .

  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: nadia_hitl_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov
        pip install -r requirements.txt || echo "No requirements.txt found"
        pip install psycopg2-binary redis asyncpg
    
    - name: Setup test database
      run: |
        # Wait for services to be ready
        sleep 10
        
        # Create test database schema
        python -c "
        import asyncio
        import asyncpg
        
        async def setup_db():
            conn = await asyncpg.connect(
                host='localhost',
                port=5432,
                user='testuser',
                password='testpass',
                database='nadia_hitl_test'
            )
            
            # Create basic tables for testing
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS interactions (
                    id SERIAL PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    message TEXT NOT NULL,
                    response TEXT,
                    created_at TIMESTAMP DEFAULT NOW()
                );
            ''')
            
            await conn.close()
        
        asyncio.run(setup_db())
        " || echo "Database setup failed, continuing..."
    
    - name: Run tests with coverage
      run: |
        PYTHONPATH=$GITHUB_WORKSPACE pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing --junit-xml=test-results.xml
      env:
        PYTHONPATH: ${{ github.workspace }}
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/nadia_hitl_test
        REDIS_URL: redis://localhost:6379/0
        # Mock API keys for testing
        OPENAI_API_KEY: sk-test-key-mock
        GEMINI_API_KEY: AIza-test-key-mock
        API_ID: 12345678
        API_HASH: test-hash-mock
        PHONE_NUMBER: +1234567890
        DASHBOARD_API_KEY: test-dashboard-key
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results.xml
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run secret detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified